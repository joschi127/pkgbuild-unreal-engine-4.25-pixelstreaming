Change 13636743 by Jonas.Meyeron 2020/06/05 18:50:37 *pending*

	integrate mike sartains 4.25 fix image memory overwrite. 
	Delay delete all buffer objects, based on https://github.com/carla-simulator/carla/issues/2956 / https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/UE_Patch/430667-13636743-patch.txt

Shelved files ...

... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanIndexBuffer.cpp#1 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanMemory.cpp#6 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanResources.h#3 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHI.cpp#6 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHIPrivate.h#1 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanTexture.cpp#5 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanViewport.cpp#2 edit
... //UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Public/VulkanMemory.h#2 edit

Differences ...

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanIndexBuffer.cpp
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanIndexBuffer.cpp

@@ -146,6 +146,7 @@
 	for (uint32 Index = 0; Index < NumBuffers; ++Index)
 	{
 		Size += Buffers[Index]->GetSize();
+		Device->GetDeferredDeletionQueue().EnqueueBufferSuballocation(Buffers[Index]);
 	}
 	UpdateVulkanBufferStats(Size, BufferUsageFlags, false);
 }

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanMemory.cpp
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanMemory.cpp

@@ -2199,11 +2199,12 @@
 		FVulkanQueue* Queue = Device->GetGraphicsQueue();
 
 		FEntry Entry;
+		Entry.SubAllocationDirect = 0;
+		Entry.StructureType = Type;
 		Queue->GetLastSubmittedInfo(Entry.CmdBuffer, Entry.FenceCounter);
-		Entry.Handle = Handle;
-		Entry.StructureType = Type;
 		Entry.FrameNumber = GVulkanRHIDeletionFrameNumber;
 
+		Entry.Handle = Handle; 
 		{
 			FScopeLock ScopeLock(&CS);
 
@@ -2219,6 +2220,70 @@
 		}
 	}
 
+	void FDeferredDeletionQueue::EnqueueResourceAllocation(TRefCountPtr<VulkanRHI::FOldResourceAllocation> ResourceAllocation)
+	{
+		FVulkanQueue* Queue = Device->GetGraphicsQueue();
+
+		FEntry Entry;
+		Entry.SubAllocationDirect = 0;
+		Entry.StructureType = EType::ResourceAllocation;
+		Queue->GetLastSubmittedInfo(Entry.CmdBuffer, Entry.FenceCounter);
+		Entry.FrameNumber = GVulkanRHIDeletionFrameNumber;
+
+		Entry.Handle = VK_NULL_HANDLE;
+		Entry.ResourceAllocation = ResourceAllocation;
+
+		{
+			FScopeLock ScopeLock(&CS);
+
+			Entries.Add(Entry);
+		}
+	}
+	void FDeferredDeletionQueue::EnqueueBufferSuballocation(TRefCountPtr<VulkanRHI::FBufferSuballocation> SubAllocation)
+	{
+		FVulkanQueue* Queue = Device->GetGraphicsQueue();
+
+		FEntry Entry;
+		Entry.SubAllocationDirect = 0;
+		Entry.StructureType = EType::BufferSuballocation;
+		Queue->GetLastSubmittedInfo(Entry.CmdBuffer, Entry.FenceCounter);
+		Entry.FrameNumber = GVulkanRHIDeletionFrameNumber;
+
+		Entry.Handle = VK_NULL_HANDLE;
+		Entry.SubAllocation = SubAllocation;
+
+		{
+			FScopeLock ScopeLock(&CS);
+
+			Entries.Add(Entry);
+		}
+	}
+	void FDeferredDeletionQueue::EnqueueBufferSuballocationDirect(FBufferSuballocation* SubAllocation)
+	{
+		FVulkanQueue* Queue = Device->GetGraphicsQueue();
+
+		FEntry Entry;
+		Entry.SubAllocationDirect = 0;
+		Entry.StructureType = EType::BufferSuballocation;
+		Queue->GetLastSubmittedInfo(Entry.CmdBuffer, Entry.FenceCounter);
+		Entry.FrameNumber = GVulkanRHIDeletionFrameNumber;
+
+		Entry.Handle = VK_NULL_HANDLE;
+		Entry.SubAllocationDirect = SubAllocation;
+
+		{
+			FScopeLock ScopeLock(&CS);
+
+			Entries.Add(Entry);
+		}
+	}
+
+
+
+
+
+
+
 	void FDeferredDeletionQueue::ReleaseResources(bool bDeleteImmediately)
 	{
 #if VULKAN_ENABLE_AGGRESSIVE_STATS
@@ -2255,6 +2320,18 @@
 				VKSWITCH(ShaderModule);
 				VKSWITCH(Event);
 #undef VKSWITCH
+				case EType::BufferSuballocation:
+				case EType::ResourceAllocation:
+					Entry->ResourceAllocation.SafeRelease();
+					Entry->SubAllocation.SafeRelease();
+					if(Entry->SubAllocationDirect)
+					{
+						delete Entry->SubAllocationDirect;
+						Entry->SubAllocationDirect = 0;
+					}
+					break;
+
+
 				default:
 					check(0);
 					break;

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanResources.h
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanResources.h

@@ -403,6 +403,11 @@
 			return 0;
 		}
 	}
+	inline TRefCountPtr<VulkanRHI::FOldResourceAllocation> GetResourceAllocation()
+	{
+		return ResourceAllocation;
+	}
+
 
 	FVulkanDevice* Device;
 

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHI.cpp
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHI.cpp

@@ -1644,7 +1644,8 @@
 
 FVulkanRingBuffer::~FVulkanRingBuffer()
 {
-	delete BufferSuballocation;
+	Device->GetDeferredDeletionQueue().EnqueueBufferSuballocationDirect(BufferSuballocation);
+	BufferSuballocation = 0;
 }
 
 uint64 FVulkanRingBuffer::WrapAroundAllocateMemory(uint64 Size, uint32 Alignment, FVulkanCmdBuffer* InCmdBuffer)

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHIPrivate.h
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanRHIPrivate.h

@@ -225,6 +225,7 @@
 	// Copy from the Depth render target partial view
 	FVulkanTextureView PartialDepthTextureView;
 	TArray<VkImageView> AttachmentViewsToDelete;
+	TArray< TRefCountPtr<VulkanRHI::FOldResourceAllocation> > ResourceAllocationsToDelete;
 
 	inline bool ContainsRenderTarget(FRHITexture* Texture) const
 	{

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanTexture.cpp
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanTexture.cpp

@@ -673,6 +673,7 @@
 		{
 			Size = GetMemorySize();
 			Device->GetDeferredDeletionQueue().EnqueueResource(VulkanRHI::FDeferredDeletionQueue::EType::Image, Image);
+			Device->GetDeferredDeletionQueue().EnqueueResourceAllocation(GetResourceAllocation());
 			Image = VK_NULL_HANDLE;
 		}
 

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanViewport.cpp
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Private/VulkanViewport.cpp

@@ -377,6 +377,10 @@
 		AttachmentTextureViews.Add(RTView);
 		AttachmentViewsToDelete.Add(RTView.View);
 
+		// Created a view to the surface memory... need to addref allocation so it doesn't get freed from under us
+		ResourceAllocationsToDelete.Add(Texture->Surface.GetResourceAllocation());
+
+
 		++NumColorAttachments;
 
 		if (InRTInfo.bHasResolveAttachments)

--- /a/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Public/VulkanMemory.h
+++ /b/UE4/Release-4.24/Engine/Source/Runtime/VulkanRHI/Public/VulkanMemory.h

@@ -1222,6 +1222,8 @@
 			Semaphore,
 			ShaderModule,
 			Event,
+			ResourceAllocation,
+			BufferSuballocation,
 		};
 
 		template <typename T>
@@ -1231,6 +1233,13 @@
 			EnqueueGenericResource(Type, (uint64)Handle);
 		}
 
+
+		void EnqueueResourceAllocation(TRefCountPtr<VulkanRHI::FOldResourceAllocation> ResourceAllocation);
+		void EnqueueBufferSuballocation(TRefCountPtr<VulkanRHI::FBufferSuballocation> Allocation);
+		void EnqueueBufferSuballocationDirect(FBufferSuballocation* SubAllocation);
+
+		
+
 		void ReleaseResources(bool bDeleteImmediately = false);
 
 		inline void Clear()
@@ -1258,11 +1267,16 @@
 
 		struct FEntry
 		{
+			EType StructureType;
+			uint32 FrameNumber;
 			uint64 FenceCounter;
+			FVulkanCmdBuffer* CmdBuffer;
+
 			uint64 Handle;
-			FVulkanCmdBuffer* CmdBuffer;
-			EType StructureType;
-			uint32 FrameNumber;
+			TRefCountPtr<VulkanRHI::FOldResourceAllocation> ResourceAllocation;
+			TRefCountPtr<VulkanRHI::FBufferSuballocation> SubAllocation;
+			VulkanRHI::FBufferSuballocation* SubAllocationDirect;
+
 		};
 		FCriticalSection CS;
 		TArray<FEntry> Entries;
